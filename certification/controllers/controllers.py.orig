# -*- coding: utf-8 -*-

import logging
from odoo import http
from odoo.http import request

_logger = logging.getLogger(__name__)

class Audit(http.Controller):
    # Débutter audit

    @http.route(['/audit/debuter/<model("critt.certification.audit"):audit>/<int:id_client>'],
                type = 'http', auth = 'public', website = True)
    def debuter_audit(self, audit, id_client, **post):
        SaisieUtilisateur = request.env['critt.certification.saisie_utilisateur']
        Client = request.env['res.partner']

        client = Client.sudo().search([('id', '=', id_client)], limit=1)
        saisie_utilisateur = SaisieUtilisateur.sudo().search([('id_audit', '=', audit.id)], limit = 1)

        if client and not saisie_utilisateur:
            vals = {'id_audit': audit.id, 'id_questionnaire': audit.questionnaire.id, 'id_client': id_client}
            saisie_utilisateur = SaisieUtilisateur.create(vals)
        else:
            if not client:
                return request.render("website.403")

        if saisie_utilisateur.etat == "nouveau":
            donnees = {'audit': audit, 'regroupement': None, 'id_client': id_client}
            return request.render('certification.accueil_questionnaire_audit', donnees)
        else:
            return request.redirect('/audit/completer_questionnaire/%s/%s' % (audit.id, id_client))

    @http.route(['/audit/completer_questionnaire/<model("critt.certification.audit"):audit>/<int:id_client>'],
                type = 'http', auth = 'public', website = True)
    def completer_questionnaire(self, audit, id_client, **post):
        Questionnaire = request.env['critt.certification.questionnaire']
        SaisieUtilisateur = request.env['critt.certification.saisie_utilisateur']

        saisie_utilisateur = SaisieUtilisateur.sudo().search(
            [('id_audit', '=', audit.id)], limit=1)
        if not saisie_utilisateur:
            return request.render("website.403")

        if saisie_utilisateur.etat == "nouveau":
            regroupement, regroupement_nr, last = Questionnaire.regroupement_suivant(saisie_utilisateur, 0)
            donnees = {'audit': audit, 'regroupement': regroupement, 'regroupement_nr': regroupement_nr, 'id_client': id_client}
            if last:
                donnees.update({'last': True})
            return request.render('certification.questionnaire', donnees)
        elif saisie_utilisateur.etat == "termine":
            return request.render('certification.questionnaire_termine', {'audit': audit,
                                                                       'saisie_utilisateur': saisie_utilisateur,
                                                                       'id_client': id_client})
        elif saisie_utilisateur.etat == "passe":
            regroupement, regroupement_nr, last = Questionnaire.regroupement_suivant(saisie_utilisateur,
                                                              saisie_utilisateur.id_dernier_regroupement_affiche.id)

            if not regroupement:
                regroupement, regroupement_nr, last = Questionnaire.regroupement_suivant(saisie_utilisateur,
                                                                  saisie_utilisateur.id_dernier_regroupement_affiche.id)

            donnees = {'audit': audit, 'regroupement': regroupement, 'regroupement_nr': regroupement_nr, 'id_client': id_client}
            if last:
                donnees.update({'last': True})
            return request.render('certification.questionnaire', donnees)

        else:
            return request.render('website.403')

    @http.route(['/audit/soumettre_reponses/<model("critt.certification.audit"):audit>/<int:id_client>'],
                type = 'http', auth = 'public', website = True)
    def soumettre(self, audit, id_client, **post):
        regroupements_valide = audit.regroupements_valide
        print(regroupements_valide)
        _logger.debug('Données entrantes: %s', post)
        id_regroupement = int(post['id_regroupement'])
        questions = request.env['critt.certification.question'].search([('id_regroupement', '=', id_regroupement)])

        erreurs = {}
        for question in questions:
            tag_reponse = "%s_%s_%s" % (audit.questionnaire.id, id_regroupement, question.id)
            erreurs.update(question.validation_question(post, tag_reponse))

        ret = {}
        if len(erreurs):
            ret['erreurs'] = erreurs
        else:
            try:
                saisie_utilisateur = request.env['critt.certification.saisie_utilisateur'].sudo().search(
                    [('id_audit', '=', audit.id)], limit=1)
            except KeyError:
                return request.render("website.403")
            id_utilisateur = request.env.user.id

            for question in questions:
                tag_reponse = "%s_%s_%s" % (audit.questionnaire.id, id_regroupement, question.id)
                request.env['critt.certification.ligne_saisie_utilisateur'].sudo(user=id_utilisateur).sauv_ligne(
                    saisie_utilisateur.id, question, post, tag_reponse)
                if post[tag_reponse] == "2":
                    regroupements_valide = False

            audit.update({'regroupements_valide': regroupements_valide})
            regroupement_suivant, _, derniere = request.env['critt.certification.questionnaire'].regroupement_suivant(
                saisie_utilisateur, id_regroupement)
            vals = {'id_dernier_regroupement_affiche': id_regroupement}
            if regroupement_suivant is None:
                audit.update({'audit_valide': audit.regroupements_valide})
                vals.update({'etat': 'termine'})
                audit.update({'etat_audit': 'termine'})
<<<<<<< HEAD
=======
                audit.get_sale_order()

>>>>>>> Lucas
            else:
                vals.update({'etat': 'passe'})
                audit.update({'etat_audit': 'debute'})

            saisie_utilisateur.sudo(user=id_utilisateur).write(vals)
        return request.redirect('/audit/completer_questionnaire/%s/%s' % (audit.id, id_client))

    @http.route(['/audit/reponses_questionnaire/<model("critt.certification.audit"):audit>/<int:id_client>/<int:num_regroupement>'],
                type = 'http', auth = 'public', website = True)
    def reponses_questionnaire(self, audit, id_client, num_regroupement, **post):
        id_regroupements = []
        for regroupement in audit.questionnaire.ids_regroupement:
            id_regroupements.append(int(regroupement.id))

        id_regroupement_affiche = id_regroupements[num_regroupement]
        regroupement_affiche = request.env['critt.certification.regroupement'].search([('id', '=', id_regroupement_affiche)])

        if len(id_regroupements) == 1:
            regroupement_suivant = None
            regroupement_precedent = None
        else:
            if(len(id_regroupements) > 1):
                if num_regroupement == 0:
                    regroupement_suivant = num_regroupement + 1
                    regroupement_precedent = None
                else:
                    if (num_regroupement == (len(id_regroupements) - 1)):
                        regroupement_suivant = None
                        regroupement_precedent = num_regroupement - 1
                    else:
                        regroupement_suivant = num_regroupement + 1
                        regroupement_precedent = num_regroupement - 1

        return request.render('certification.reponses_questionnaire',
                              {'audit': audit,
                               'id_client': id_client,
                               'regroupement_nr': 0,
                               'regroupement_affiche': regroupement_affiche,
                               'regroupement_suivant': regroupement_suivant,
                               'regroupement_precedent': regroupement_precedent,
                               'num_regroupement': num_regroupement})